name: Build
on: [push, pull_request]

jobs:
  linter:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: ["3.6", "3.7"]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # this is to enable gitlint to check all PR commit messages
      - name: Use Python ${{ matrix.python }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python }}
      - name: Install
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r infra/requirements.txt
      - name: Lint Last Commit
        if: github.event_name == 'push'
        run: |
          gitlint
      - name: Lint All Commits on Pull Request
        if: github.event_name == 'pull_request'
        run: |
          gitlint --commits origin/${{ github.base_ref }}..${{ github.event.pull_request.head.sha }}
      - name: Format
        run: |
          black . --check --diff
      - name: Lint
        run: |
          pylint infra/
      - name: Import Sorting
        run: |
          isort -rc . --check --diff

  test:
    runs-on: ubuntu-latest
    needs: linter
    strategy:
      matrix:
        python: ["3.6", "3.7"]
    steps:
      - uses: actions/checkout@v2

      - name: Use Python ${{ matrix.python }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python }}

      - name: Install
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r infra/requirements.txt

      - name: Test
        run: |
          pytest

  test-infra:
    # TODO: add "SKIP-INFRA-TEST" label check
    needs: [linter, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    strategy:
      matrix:
        python: ["3.6"]
    steps:
      - uses: actions/checkout@v2

      - name: Use Python ${{ matrix.python }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python }}

      - name: Install
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r infra/requirements.txt

      - name: Use Node.js 12.x for CDK deployment
        uses: actions/setup-node@v2.1.1
        with:
          node-version: "12.x"
          registry-url: https://registry.npmjs.org

      - name: Install aws-cdk
        run: npm install -g aws-cdk

      - name: get cdk version
        run: cdk --version

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2
          mask-aws-account-id: true
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_NON_PROD }}

      - name: Destroy previous test AWS infra if exists
        run: |
          cdk destroy --force data-lake-dev || true
        working-directory: infra

      - name: Deploy AWS infra for testing
        run: |
          cdk deploy data-lake-dev
        working-directory: infra

      - name: Destroy AWS infra used for testing
        run: cdk destroy --force data-lake-dev
        working-directory: infra

  deploy:
    needs: [linter, test, test-infra]
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'release'))
    strategy:
      matrix:
        python: ["3.6"]
    steps:
      - uses: actions/checkout@v2

      - name: Use Python ${{ matrix.python }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python }}

      - name: Install python requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -r infra/requirements.txt

      - name: Use Node.js 12.x for CDK deployment
        uses: actions/setup-node@v2.1.1
        with:
          node-version: "12.x"
          registry-url: https://registry.npmjs.org

      - name: Install aws-cdk
        run: npm install -g aws-cdk

      - name: get cdk version
        run: cdk --version

      # NONPROD DEPLOYMENT
      - name: (NonProd) Configure AWS Credentials
        if: github.ref == 'refs/heads/master' && github.repository == 'linz/geospatial-data-lake'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2
          mask-aws-account-id: true
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_NON_PROD }}

      - name: (NonProd) Deploy
        if: github.ref == 'refs/heads/master' && github.repository == 'linz/geospatial-data-lake'
        run: cdk deploy data-lake-nonprod
        working-directory: infra

      # PROD DEPLOYMENT
      - name: (Prod) Configure AWS Credentials
        if: startsWith(github.ref, 'release') && github.repository == 'linz/geospatial-data-lake'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2
          mask-aws-account-id: true
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_PROD }}

      - name: (Prod) Deploy
        if: startsWith(github.ref, 'release') && github.repository == 'linz/geospatial-data-lake'
        run: cdk deploy --require-approval never
        working-directory: infra
