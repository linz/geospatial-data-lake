---
name: Build
on: [push]  # yamllint disable-line rule:truthy

jobs:
    linter:
        runs-on: ubuntu-20.04
        strategy:
            matrix:
                python: ['3.8']

        steps:
            - uses: actions/checkout@v2
              with:
                  fetch-depth: 0  # this is to enable gitlint to check all PR commit messages

            - name: Use Python ${{ matrix.python }}
              uses: actions/setup-python@v2.1.4
              with:
                  python-version: ${{ matrix.python }}

            - name: Cache pip
              uses: actions/cache@v2
              with:
                  path: ~/.cache/pip
                  key: ${{ runner.os }}-pip-${{ matrix.python }}-${{ hashFiles('./poetry.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-pip-${{ matrix.python }}-

            - name: Install Python dependencies
              run: |
                  python -m pip install --upgrade pip
                  python -m pip install poetry
                  python -m poetry install --extras='cdk datasets-endpoint'

            - name: Check last commit message
              if: github.event_name == 'push'
              run: |
                  poetry run gitlint

            - name: Check all commit messages in Pull Request
              if: github.event_name == 'pull_request'
              run: >
                  poetry run gitlint --commits
                  origin/${{ github.base_ref }}..${{ github.event.pull_request.head.sha }}

            - name: Run pre-commit hooks
              run: |
                  poetry run pre-commit run --all-files

            - name: Check Bash scripts
              run: |
                  git ls-files -z -- '*.bash' | xargs --null poetry run shellcheck


    test:
        needs: [linter]
        runs-on: ubuntu-20.04
        if: github.event_name == 'push'
        strategy:
            matrix:
                python: ['3.8']

        steps:
            - uses: actions/checkout@v2

            - name: Use Python ${{ matrix.python }}
              uses: actions/setup-python@v2.1.4
              with:
                  python-version: ${{ matrix.python }}

            - name: Cache pip
              uses: actions/cache@v2
              with:
                  path: ~/.cache/pip
                  key: ${{ runner.os }}-pip-${{ matrix.python }}-${{ hashFiles('./poetry.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-pip-${{ matrix.python }}-

            - name: Install Python dependencies
              run: |
                  python -m pip install --upgrade pip
                  python -m pip install poetry
                  python -m poetry install --extras='cdk datasets-endpoint'

            - name: Install AWS CLI
              run: sudo apt install awscli

            - name: Use Node.js 12.x for CDK deployment
              uses: actions/setup-node@v2.1.3
              with:
                  node-version: 12.x
                  registry-url: https://registry.npmjs.org

            - uses: actions/cache@v2
              with:
                  path: ~/.npm
                  key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-node-

            - name: Install AWS CDK
              run: npm install -g aws-cdk

            - name: Print CDK version
              run: poetry run cdk --version

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ap-southeast-2
                  mask-aws-account-id: true
                  role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_CI }}

            - name: Set unique deployment environment type variable
              run: |
                  DEPLOY_ENV=ci
                  echo "DEPLOY_ENV=$DEPLOY_ENV" | tee -a $GITHUB_ENV

            - name: Wait for teardown of existing stacks
              run: |
                  timeout 2h \
                      ./.github/workflows/wait-for-stack-teardown.bash \
                      geospatial-data-lake-api-ci \
                      geospatial-data-lake-processing-ci \
                      geospatial-data-lake-storage-ci

            - name: Deploy AWS stacks for testing
              run: |
                  poetry run cdk bootstrap aws://unknown-account/ap-southeast-2
                  poetry run cdk deploy --all --require-approval never

            - name: Run tests
              run: >
                  poetry run pytest --randomly-dont-reset-seed "--randomly-seed=${GITHUB_RUN_ID}"
                  backend/tests tests

            - name: Destroy AWS stacks used for testing
              run: |
                  # Don't drop networking stack. It is updated very rarely and deployment/destroy
                  # takes a very long time.
                  poetry run cdk destroy --force storage processing api
              if: always()  # clean-up AWS stack after failure


    deploy:
        needs: [linter, test]
        runs-on: ubuntu-20.04
        if: >
            github.event_name == 'push'
            && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'release'))
        strategy:
            matrix:
                python: ['3.8']

        steps:
            - uses: actions/checkout@v2

            - name: Use Python ${{ matrix.python }}
              uses: actions/setup-python@v2.1.4
              with:
                  python-version: ${{ matrix.python }}

            - name: Cache pip
              uses: actions/cache@v2
              with:
                  path: ~/.cache/pip
                  key: ${{ runner.os }}-pip-${{ matrix.python }}-${{ hashFiles('./poetry.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-pip-${{ matrix.python }}-

            - name: Install Python dependencies
              run: |
                  python -m pip install --upgrade pip
                  python -m pip install poetry
                  python -m poetry install --extras=cdk --no-dev

            - name: Use Node.js 12.x for CDK deployment
              uses: actions/setup-node@v2.1.3
              with:
                  node-version: 12.x
                  registry-url: https://registry.npmjs.org

            - uses: actions/cache@v2
              with:
                  path: ~/.npm
                  key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-node-

            - name: Install AWS CDK
              run: npm install -g aws-cdk

            - name: Print CDK version
              run: poetry run cdk --version

            # NONPROD DEPLOYMENT
            - name: (NonProd) Configure AWS credentials
              if: >
                  github.ref == 'refs/heads/master'
                  && github.repository == 'linz/geospatial-data-lake'
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ap-southeast-2
                  mask-aws-account-id: true
                  role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_NON_PROD }}

            - name: (NonProd) Deploy AWS stacks
              if: >
                  github.ref == 'refs/heads/master'
                  && github.repository == 'linz/geospatial-data-lake'
              env:
                  DEPLOY_ENV: nonprod
              run: |
                  poetry run cdk bootstrap aws://unknown-account/ap-southeast-2
                  poetry run cdk deploy --all --require-approval never

            # PROD DEPLOYMENT
            - name: (Prod) Configure AWS credentials
              if: >
                  startsWith(github.ref, 'release')
                  && github.repository == 'linz/geospatial-data-lake'
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ap-southeast-2
                  mask-aws-account-id: true
                  role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_PROD }}

            - name: (Prod) Deploy AWS stacks
              if: >
                  startsWith(github.ref, 'release')
                  && github.repository == 'linz/geospatial-data-lake'
              env:
                  DEPLOY_ENV: prod
              run: |
                  poetry run cdk bootstrap aws://unknown-account/ap-southeast-2
                  poetry run cdk deploy --all --require-approval never
