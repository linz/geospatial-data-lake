name: Deploy
on:
  push:
    branches:
    - master
    - release-*
    tags:
    - release-*

jobs:
  deploy:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python: ['3.8']

    steps:
    - name: Check out repository
      uses: actions/checkout@v2
      with:
        submodules: 'true'

    - name: Print event context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: |
        echo "${GITHUB_CONTEXT}"
        echo "ref_type: ${{ github.event.ref_type }}"

    - name: Use Node for CDK deployment
      uses: actions/setup-node@v2.1.5
      with:
        node-version: 14
        registry-url: https://registry.npmjs.org

    - name: Cache Node.js packages
      uses: actions/cache@v2.1.4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Node.js dependencies
      run: npm ci --production

    - name: Add local Node packages to PATH
      run: echo "./node_modules/.bin:$PATH" >> $GITHUB_PATH

    - name: Use Python ${{ matrix.python }}
      uses: actions/setup-python@v2.2.1
      with:
        python-version: ${{ matrix.python }}

    - name: Cache pip
      uses: actions/cache@v2.1.4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python }}-${{ hashFiles('./poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python }}-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install poetry
        python -m poetry install \
            --extras='cdk check_files_checksums check_stac_metadata content_iterator datasets dataset_versions import_dataset import_status validation_summary'

    - name: Print CDK version
      run: poetry run cdk --version

    # NONPROD DEPLOYMENT
    - name: (NonProd) Configure AWS credentials
      if: >
        github.ref == 'refs/heads/master'
        && github.repository == 'linz/geospatial-data-lake'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-2
        mask-aws-account-id: true
        role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_NON_PROD }}

    - name: (NonProd) Deploy AWS stacks
      if: >
        github.ref == 'refs/heads/master'
        && github.repository == 'linz/geospatial-data-lake'
      run: |
        poetry run cdk bootstrap aws://unknown-account/ap-southeast-2
        poetry run cdk deploy --all --require-approval never
      env:
        DEPLOY_ENV: nonprod
        DATALAKE_SAML_IDENTITY_PROVIDER_ARN: ${{ secrets.DATALAKE_SAML_IDENTITY_PROVIDER_ARN_NON_PROD }}

    # PROD DEPLOYMENT
    - name: (Prod) Configure AWS credentials
      if: >
        startsWith(github.ref, 'refs/tags/release-')
        && github.repository == 'linz/geospatial-data-lake'
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-2
        mask-aws-account-id: true
        role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_PROD }}

    - name: (Prod) Deploy AWS stacks
      if: >
        startsWith(github.ref, 'refs/tags/release-')
        && github.repository == 'linz/geospatial-data-lake'
      run: |
        poetry run cdk bootstrap aws://unknown-account/ap-southeast-2
        poetry run cdk diff -c aws-cdk:enableDiffNoFail=true
        # poetry run cdk deploy --all --require-approval never

      env:
        DEPLOY_ENV: prod
        DATALAKE_SAML_IDENTITY_PROVIDER_ARN: ${{ secrets.DATALAKE_SAML_IDENTITY_PROVIDER_ARN_PROD }}
